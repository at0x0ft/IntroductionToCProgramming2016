まず、文字列の出力関数printfにより"Math scores:"と出力する。
改行し、続けて出力された表の題名("Math scores:")と成績との区切り線にあたる"--------"を出力し、再び改行して出力を終了する。


次にループ式forを実行する。ループ変数の初期化式i=0から順番に、iがループ条件"i<8"を満たしているかどうかの評価を行い、その真偽によってそれぞれの指示に従って進める。
条件を満たしている場合は以下に記されている操作aを実行し、1回の操作終了毎にループ変数iに1を加え、ループ条件の評価に戻る。
条件を満たしていない場合は操作aを実行せずにそのまま何もせずにループを終了する。
つまり、このループでは操作aがi=0,1,2,3,4,5,6,7の計8回にわたって繰り返し実行されることになる。

操作a:出力関数printfにより、"Student #(番号): (番号に対応する成績(3桁))"と出力し、改行する。

番号は1から順に表示されるため、0から始まるループ変数とは1だけずれている。だから、番号はループ変数iに1を足した"i+1"で出力されるようにしている。
また、成績はプログラム冒頭7行目で定義した整数配列変数"math_scores"から、配列変数に格納されている要素（成績を表す1~100までの数字）をループ変数に対応させて呼び出し、10進数で出力する。このとき、3桁の場合とそれ以外の場合で位が揃うように、表示桁数は3桁に設定してある。こうすることで、要素が1桁、2桁の時にそれぞれ、十・百の位、百の位に空白が入り、一の位の位置がすべて揃った状態で出力される。
この配列変数内の要素にはループ変数と同様に、インデックスが整数0から順に、左にある要素から順に割り振られている。したがって、インデックスはループ変数iと一致させたままでよい。要素数は8でループ回数と一致しているため、これらのずれによるエラーは起こらない。

以上、ループ終了後に出力関数printfにより、区切り線にあたる"--------"を出力し、改行する。


最後に戻り値return 0でプログラムがどのように終了したかをOSに報告する。今回は"0"(真)であるため、正常に終了したことを報告する。


以上でmain関数の呼び出しを終了し、このプログラムを終了する。


実際に端末上でプログラムを実行したとき、

Math Scores:
--------
Student #1: 84
Student #2: 29
Student #3: 100
Student #4: 87
Student #5: 95
Student #6: 95
Student #7: 30
Student #8: 90
--------

というような形で出力される。
（※この説明文章自体を表示する際に、成績が2桁の場合でも前の空白が1文字分しか空いておらず、桁数が揃っていないように表示されてしまったり、区切り線が実際よりも短く表示されたりする可能性がある。しかし端末上では、一の位が揃い、区切り線もStudentの次の空白の列まできちんと出力される。）
