このプログラムは、#includeから始まる<stdio.h>、<stdlib.h>、<string.h>の3種類のディレクティブと、一つのTurtle型の構造体、move関数、turnRight関数、main関数で構成されている。


まず、Turtle型の構造体の説明をする。
Turtle型の構造体には4種類の整数型メンバが格納されており、順にx、y、direction、penと名付けられている。xとyにはそれぞれ平面上での亀の位置のx座標とy座標を整数値で格納する。directionは亀の向いている方角を表す変数である。0～3までの4つの整数値で指定され、0は北(y軸負方向)、1は東(x軸正方向)、2は南(y軸正方向)、3は西(x軸負方向)を向いていることを表している。penは亀が動いた後の軌跡の色を指定するための値である。黒を0、白を255として、0～255の整数値で無彩色を指定する。


次に、move関数について説明する。
moveコマンドでは直後に整数値を入力し、亀を向いてる方向にその整数値分だけ進める。このコマンドを処理するための関数が、move関数である。この関数では戻り値を持たないため、関数宣言冒頭部分を"void"と指定している。又、前述のTurtle型構造体のポインタ変数tと、整数型変数nを引数として使用する。整数変数nは上記のmove直後の整数値コマンドを表す。関数内部では整数型変数dx、dy、iが指定されている。dx、dyはポインタtの指し示すメンバのdirectionの値を読み取って、それをx軸･y軸の正負に変換するための変数である。なお、dx･dy共に0で初期化されている。変数iは後述のmain関数およびmove関数内でのforループで使用するためのループ変数である。なお、ここまでのmove関数内で出てきた変数n、iは後述のmain関数内での整数変数n、iと共通している。冒頭の4つの条件式ifは、ポインタtの指し示すメンバdirectionから値を判定し、dx、dyに反映させる処理を行っている。上から順に、directionが0ならdyを-1、1ならdxを+1、2ならdyを+1、3ならdxを-1とする。条件に適合しなかった変数dxまたはdyは0のままである。この下で、ループ変数iのforループを実行する。iは0から開始され、iがnより小さい場合に、以下の操作1を実行、iがn以上の場合には操作1を実行せずにそのままforループを終了する。なお、操作1が終了したのちにiに1だけ足し、再びiとnの大小比較を行う。

操作1:ポインタtの指し示すメンバ･xにdxを足す。又、ポインタtの指し示すメンバ･yにdyを足す。

従って、このforループでは操作1がn回繰り返される。
つまり、向いている方向へ亀がnだけ進むことを意味している。


次に、turnRight関数を説明する。
rightコマンドでは、亀を現在向いている方向から見て、右側に一回だけ転回させるコマンドである。このコマンドを処理するための関数がturnRight関数である。この関数では戻り値を持たないため、関数宣言冒頭部分を"void"と指定している。又、前述のTurtle型構造体のポインタ変数tのみを引数として使用する。ここではまず、ポインタtの指し示すメンバ･directionの値に1を加える。ただし、メンバdirectionは0～3までが指定されているため、directionの値が4となった時は、条件式ifによりdirectionの値を0としている。これによって亀が時計回りに転回すること、すなわち右側に1回だけ転回することを表現している。


最後にmain関数の部分について説明をする。
ここでは関数直後の引数として整数型変数argcと文字型変数ポインタを指し示すポインタ変数argvが指定されている。これら二つはまとめてコマンドライン引数と呼ばれており、argcはコマンドラインで入力されたコマンドの数を表すための変数、argvは配列の中に配列が格納された二重ポインタ変数である。個々のコマンドを大きな配列に格納し、更にそのコマンド一つ一つを一文字単位で小さな配列に格納している。つまり、argcの値はargvにおける大きな配列に含まれる要素の数、小さな配列の個数に対応する。

以下では実際にコマンドラインで、"./turtle0 move 100 right move 50"と入力された場合に従ってmain関数内での処理の様子を示す。

まず、ループ変数iについてのforループがある。このループではi=1で初期化され、最初にiがi < argcを満たすかどうかを判定し、
条件に合致する場合においてのみ以下に示す操作2を実行する。操作2完了後にループ変数iを1だけ足し、再び条件判定を行う。
なお、条件に合致しない場合は操作2は行わず、そのままforループを終了する。
ここでの整数型変数argcは6であるから、条件に適合するiは1,2,3,4,5であり、操作2は計5回実行される。

操作2

まず、二つの関数printfにより、"Turtle at ((亀の現在位置のx座標),(亀の現在位置のy座標))　#(軌跡の色(penで指定した0～255数字))"と表示し、改行して"Command: (i番目に入力したコマンド。但し、番号は"./turtle0"の直後のコマンドから、1から順に数える)"を表示し再び改行する。
以下、四つの条件式if(else)により、操作が異なる。
なお、結果的に一回の操作2の実行では、基本的に四つのif(else)のうち、いずれか一つのみが実行される。

一つ目のifではi番目のコマンドが"pen"だった場合について処理する。
このとき、まずループ変数iに1だけ加えポインタ変数argvが指し示すコマンドを一つだけ右にずらす。すなわち、ここでargvは"pen"の次に入力された数値を指し示すようになる。
関数sscanfにより、この数値を構造体tのメンバ･penに新たに代入する。
しかし、今回の場合では入力されたコマンドに"pen"はないため、実行されない。

二つ目のelse ifではi番目のコマンドが"move"だった場合について処理する。
このとき、moveコマンドの後に続く数値(進む座標を表す数値)を記録するため、新たに整数型変数nを宣言し、ループ変数iに1だけ加えてargvの指すコマンドをmoveの直後の数字のコマンドに変える。
関数sscanfにより、数値コマンドに記録された数値をnに記録し、冒頭で定義した関数moveを実行する。
今回はi=1(if内で2に変化)、4(if内で5に変化)について実行される。

三つ目のelse ifではi番目のコマンドが"right"だった場合について処理する。
このとき、冒頭で定義した関数turnRightを実行する。
今回はi=3についてのみ実行される。

四つ目のelseではi番目のコマンドが上記"pen"、"move"、"right"以外であった場合について処理する。
このとき、関数fprintfとエラー変数stderrにより、エラーメッセージ"Unknown command. Stop."を表示し改行する。
return 1により、OSにプログラムの異常終了を報告し、プログラムをこの段階で終了させる。
今回は入力されたコマンドでこの場合に該当するものは存在しないため、実行されない。

操作2はここまで

forループが終了したのち、出力関数printfにより、"Turtle at ((ここまでの動作終了後の亀の位置のx座標),(ここまでの動作終了後の亀の位置のy座標)) #(ここまでの動作終了後のpenの値) --STOP"と表示し、改行する。
return 0により、OSにプログラムの正常終了を報告し、プログラムを終了する。



最後に、具体的に"./turtle0 move 100 right move 50"と入力された場合の亀の動きを簡単に説明し、端末上での表示結果を記す。
最初、亀は(320,240)の位置にいてy軸負方向(北)を向いているので、"move 100"により(320,140)まで移動し、"right"により右に転回(x軸正方向を向き)、"move 50"により(370,140)まで移動して終了する。
端末上での表示結果は以下の通りである。但し、$はプロンプトを表すとする。

$ ./turtle0 move 100 right move 50                                                                                                                                                                      
Turtle at (320, 240) #255                                                                                                                                                                                     
Command: move                                                                                                                                                                                                 
Turtle at (320, 140) #255                                                                                                                                                                                     
Command: right                                                                                                                                                                                                
Turtle at (320, 140) #255                                                                                                                                                                                     
Command: move                                                                                                                                                                                                 
Turtle at (370, 140) #255 --STOP
